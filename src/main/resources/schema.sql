CREATE TABLE IF NOT EXISTS users
(
    user_id  LONG GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    varchar NOT NULL,
    login    varchar NOT NULL,
    name     varchar NOT NULL,
    birthday date
);

CREATE TABLE IF NOT EXISTS user_friend
(
    user_from  int NOT NULL,
    user_to    int NOT NULL,
    is_applied boolean DEFAULT false,
    PRIMARY KEY (user_from, user_to),
    CONSTRAINT fk_user_friend_user_from_id
        FOREIGN KEY (user_from) REFERENCES users (user_id),
    CONSTRAINT fk_user_friend_user_to_id
        FOREIGN KEY (user_to) REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS mpa
(
    rating_id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        varchar NOT NULL,
    description varchar(200)
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         varchar      NOT NULL,
    description  varchar(200) NOT NULL,
    release_date date,
    duration     int
);

CREATE TABLE IF NOT EXISTS film_rating
(
    film_id   int NOT NULL,
    rating_id int NOT NULL,
    PRIMARY KEY (film_id, rating_id),
    CONSTRAINT fk_film_rating_film_id
        FOREIGN KEY (film_id) REFERENCES films (film_id),
    CONSTRAINT fk_film_rating_rating_id
        FOREIGN KEY (rating_id) REFERENCES mpa (rating_id)
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id  int NOT NULL,
    genre_id int NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_film_genre_film_id
        FOREIGN KEY (film_id) REFERENCES films (film_id),
    CONSTRAINT fk_film_genre_genre_id
        FOREIGN KEY (genre_id) REFERENCES genres (genre_id)
);

CREATE TABLE IF NOT EXISTS film_like
(
    film_id int NOT NULL,
    user_id int NOT NULL,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT fk_film_like_film_id
        FOREIGN KEY (film_id) REFERENCES films (film_id),
    CONSTRAINT fk_film_like_user_id
        FOREIGN KEY (user_id) REFERENCES users (user_id)
);


